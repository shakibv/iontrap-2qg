#include "fidelity_integrals.h"

namespace experiment {

    std::complex<double> alpha_1_1_integ_part_1(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {
        const std::complex<double> j(0, 1);

        std::complex<double> result = ((sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))*
                (((sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                        -sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))*
                        (exp(j*c*IonTrap.nu_list[k])
                                *(j*IonTrap.nu_list[k]*cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        +sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))*
                                                (IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -j*exp(j*d*IonTrap.nu_list[k])
                                        *(IonTrap.nu_list[k]*cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                -j*
                                                        sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))))
                        /((pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2))*
                                (IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))-(j*IonTrap.nu_list[k]
                        *(exp(j*e*IonTrap.nu_list[k])*cos(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                                -exp(j*f*IonTrap.nu_list[k])*
                                        cos(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))
                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))-
                                sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))))
                        /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*(pow(IonTrap.nu_list[k], 2)-
                                pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)), 2)))
                        +((sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))-
                                sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                                *(exp(j*e*IonTrap.nu_list[k])*sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                                        -
                                                exp(j*f*IonTrap.nu_list[k])
                                                        *sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))
                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))/
                                ((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*(-pow(IonTrap.nu_list[k], 2)
                                        +pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)), 2)))))/
                (IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p));

        return result;
    }

    std::complex<double> alpha_1_1_integ_part_2(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = (((exp(j*c*IonTrap.nu_list[k])-exp(j*d*IonTrap.nu_list[k]))
                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)+pow(IonTrap.nu_list[k], 2))
                +exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*IonTrap.nu_list[k]
                                *cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))-j
                                *(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        +pow(IonTrap.nu_list[k], 2))
                                *sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                -2.0*j*exp(j*e*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)+pow(IonTrap.nu_list[k], 2))
                        *cos(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                +j*exp(j*d*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*IonTrap.nu_list[k]
                                *cos(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                +(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        +pow(IonTrap.nu_list[k], 2))
                                        *sin(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                +2.0*(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)+pow(IonTrap.nu_list[k], 2))
                        *(j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                *cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -j*exp(j*d*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                        *cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                +(exp(j*c*IonTrap.nu_list[k])-exp(j*e*IonTrap.nu_list[k]))
                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                +(-exp(j*d*IonTrap.nu_list[k])+exp(j*e*IonTrap.nu_list[k]))
                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                /(2.*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                        *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)));

        return result;
    }

    std::complex<double> alpha_1_1_integ_part_3(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = (((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                *(-(exp(j*a*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2)
                                +(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2))
                                        *cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                        *sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        +exp(j*b*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2)
                                        +(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))
                                                *cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                                *sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        +2.0*exp(j*c*IonTrap.nu_list[k])*(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                +pow(IonTrap.nu_list[k], 2))*(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                *(j*IonTrap.nu_list[k]*cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                *(sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                        -sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))))
                /((4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)*pow(IonTrap.nu_list[k], 2)
                        +pow(IonTrap.nu_list[k], 4))*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                +(j*IonTrap.nu_list[k]
                        *(exp(j*e*IonTrap.nu_list[k])*cos(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                                -exp(j*f*IonTrap.nu_list[k])*cos(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -2.0*sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)), 2))
                +((sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -2.0*sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(exp(j*e*IonTrap.nu_list[k])*sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                                -exp(j*f*IonTrap.nu_list[k])*sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                        /(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)), 2)))
                /(2.*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2));

        return result;
    }

    std::complex<double> alpha_1_1_integ_part_4(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = ((-1.0*j*exp(j*e*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                *(cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *cos(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                        *(-(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k])
                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                +(exp(-2.0*j*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+j*c*IonTrap.nu_list[k])
                        *IonTrap.nu_list[k]*(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                +(4.0*exp(j*c*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                +(exp(j*c*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))*IonTrap.nu_list[k]
                        *(-sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k])
                                *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                +(2.0*exp(j*c*IonTrap.nu_list[k])*(-sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                +(8.0*exp(j*c*IonTrap.nu_list[k])*cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(-sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                +(IonTrap.nu_list[k]*((-1.0*j*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                        *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /exp(j*a*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k]))
                        +(j*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /exp(j*b*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k]))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k], 2)
                                *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))+(2.0
                *(exp(j*a*IonTrap.nu_list[k])
                        *(j*IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        -j*exp(j*b*IonTrap.nu_list[k])
                                *(IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))))
                /pow(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)-pow(IonTrap.nu_list[k], 2), 2)
                +(-1.0*j*exp(j*a*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                        *IonTrap.nu_list[k]*((2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k])
                        *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        +exp(j*b*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                                *IonTrap.nu_list[k]
                                *(j*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k])
                                        *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                                *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k], 2)
                                *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k])
                                *(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                -(4.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*(exp(j*a*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))-exp(j*b*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                        /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                +(2.0*j*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)*(exp(j*a*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))-exp(j*b*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                        /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))+(2.0*j*IonTrap.nu_list[k]
                *(-(exp(j*a*IonTrap.nu_list[k])*(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -j*IonTrap.nu_list[k]*sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                        +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2))))+exp(j*b*IonTrap.nu_list[k])
                        *(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*IonTrap.nu_list[k]
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                        -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                -(j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]*(-(exp(j*a*IonTrap.nu_list[k])
                        *(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*IonTrap.nu_list[k]
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))))+exp(j*b*IonTrap.nu_list[k])
                        *(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*IonTrap.nu_list[k]
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                        /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                +(4.0*j*exp(j*e*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *cos(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                *(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)-pow(IonTrap.nu_list[k], 2)))
                -(2.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2)))+(2.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                *(-sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)*pow(IonTrap.nu_list[k], 2)
                        +pow(IonTrap.nu_list[k], 4))+(exp(j*e*IonTrap.nu_list[k])
                *(cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))-IonTrap.nu_list[k])
                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))+IonTrap.nu_list[k]))
                +(4.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                *(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2)))+(2.0*(exp(j*a*IonTrap.nu_list[k])
                *(-2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        +j*IonTrap.nu_list[k]*sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                +exp(j*b*IonTrap.nu_list[k])*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -j*IonTrap.nu_list[k]*sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)*pow(IonTrap.nu_list[k], 2)
                        +pow(IonTrap.nu_list[k], 4))+(2.0*(-(exp(j*a*IonTrap.nu_list[k])
                *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2)
                        +pow(IonTrap.nu_list[k], 2)*cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -2.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                *sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                +exp(j*b*IonTrap.nu_list[k])
                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2)
                                +pow(IonTrap.nu_list[k], 2)*cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -2.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                        *sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4)))
                -(4.0*exp(j*c*IonTrap.nu_list[k])*(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                +(4.0*exp(j*e*IonTrap.nu_list[k])*(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2)))/4.0;

        return result;
    }

    std::complex<double> alpha_1_2_integ_part_1(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = ((sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                -sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp))))*(-1.0*j*IonTrap.nu_list[k]
                *(exp(j*a*IonTrap.nu_list[k])*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -exp(j*b*IonTrap.nu_list[k])*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                        -sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                *(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2))
                +pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)*(-(pow(IonTrap.nu_list[k], 2)
                        *(exp(j*a*IonTrap.nu_list[k])*sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -exp(j*b*IonTrap.nu_list[k])*sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))))-j*IonTrap.nu_list[k]
                        *(exp(j*c*IonTrap.nu_list[k])*cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -exp(j*d*IonTrap.nu_list[k])*cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                        +(((exp(j*a*IonTrap.nu_list[k])-exp(j*c*IonTrap.nu_list[k]))
                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +(-exp(j*b*IonTrap.nu_list[k])+exp(j*c*IonTrap.nu_list[k]))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                +((-exp(j*a*IonTrap.nu_list[k])+exp(j*d*IonTrap.nu_list[k]))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        +(exp(j*b*IonTrap.nu_list[k])-exp(j*d*IonTrap.nu_list[k]))
                                                *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                                *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2))+pow(IonTrap.nu_list[k], 2)
                *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*(exp(j*c*IonTrap.nu_list[k])
                *(j*IonTrap.nu_list[k]*cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                        +sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))-j*exp(j*d*IonTrap.nu_list[k])
                *(IonTrap.nu_list[k]*cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                        -j*sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))))
                /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                        *(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)));

        return result;
    }

    std::complex<double> alpha_1_2_integ_part_2(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = (2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*pow(IonTrap.nu_list[k], 2)
                *(exp(j*c*IonTrap.nu_list[k])*(-(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))-IonTrap.nu_list[k])
                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                        *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                *cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -j*IonTrap.nu_list[k]*sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))))
                        -2.0*(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)-pow(IonTrap.nu_list[k], 2))
                                *(j*IonTrap.nu_list[k]*cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))+exp(j*d*IonTrap.nu_list[k])
                        *(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))-IonTrap.nu_list[k])
                                *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                        *cos(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        -j*IonTrap.nu_list[k]
                                                *sin(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))+2.0
                                *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        -pow(IonTrap.nu_list[k], 2))
                                *(j*IonTrap.nu_list[k]*cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))))
                *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*(2.0*j*IonTrap.nu_list[k]
                        *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                        *(exp(j*a*IonTrap.nu_list[k])*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -exp(j*b*IonTrap.nu_list[k])*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                +sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                -2.0*sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                        +(cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))*(-(exp(j*a*IonTrap.nu_list[k])
                                *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 4)
                                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                +4.0*exp(j*c*IonTrap.nu_list[k])
                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))-IonTrap.nu_list[k])
                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                +cos(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        *(exp(j*a*IonTrap.nu_list[k])
                                                *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 4)
                                                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                                *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +4.0*exp(j*d*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                                +pow(IonTrap.nu_list[k], 2))
                                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))-sin(b
                                                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                +2.0*j*exp(j*c*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                        *IonTrap.nu_list[k]
                                        *(-(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                        *sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                +2.0*j*exp(j*d*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))-IonTrap.nu_list[k])
                                        *IonTrap.nu_list[k]
                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                        *sin(2.0*d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                +2.0*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))-IonTrap.nu_list[k])
                                        *(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))+IonTrap.nu_list[k])
                                        *(2.0*j*exp(j*c*IonTrap.nu_list[k])
                                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))*IonTrap.nu_list[k]
                                                *cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -2.0*exp(j*a*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +2.0*exp(j*c*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +2.0*exp(j*a*IonTrap.nu_list[k])*pow(IonTrap.nu_list[k], 2)
                                                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +2.0*exp(j*a*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -2.0*exp(j*d*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -2.0*exp(j*a*IonTrap.nu_list[k])*pow(IonTrap.nu_list[k], 2)
                                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -2.0*j*exp(j*d*IonTrap.nu_list[k])
                                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                        *IonTrap.nu_list[k]
                                                        *cos(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))-sin(b
                                                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                                -exp(j*c*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *cos((c-e)*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +exp(j*c*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *cos((c+e)*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +j*exp(j*c*IonTrap.nu_list[k])
                                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                        *IonTrap.nu_list[k]
                                                        *sin((c-e)*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +exp(j*b*IonTrap.nu_list[k])
                                                        *(-(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                                +IonTrap.nu_list[k])
                                                        *((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                                +IonTrap.nu_list[k])
                                                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                                -sin(d*(IonTrap.delta[0][0]
                                                                        +IonTrap.get_stark_shift(0, t_pp))))
                                                        *(sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                                +sin(d*(IonTrap.delta[0][0]
                                                                        +IonTrap.get_stark_shift(0, t_pp)))-2.0*sin(e
                                                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +2.0*exp(j*d*IonTrap.nu_list[k])
                                                        *pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                                        *sin(d*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -j*exp(j*c*IonTrap.nu_list[k])
                                                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp))
                                                        *IonTrap.nu_list[k]
                                                        *sin((c+e)*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                /(4.*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                        *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_pp)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *(pow(IonTrap.nu_list[k], 2)-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)));

        return result;
    }

    std::complex<double> alpha_1_2_integ_part_3(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result = (((exp(j*a*IonTrap.nu_list[k])-exp(j*b*IonTrap.nu_list[k]))
                *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)-pow(IonTrap.nu_list[k], 2))
                +j*exp(j*a*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                *cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2))
                                        *sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                +2.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                        *cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                +exp(j*b*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                        *(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                *cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))-j
                                *(2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        +pow(IonTrap.nu_list[k], 2))
                                *sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                +2.0*(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                        *(-1.0*j*exp(j*a*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +j*exp(j*b*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                        *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -exp(j*a*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +exp(j*c*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                +exp(j*b*IonTrap.nu_list[k])*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                *(sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))
                        -sin(f*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)))))
                /(2.*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                        *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))
                        *(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_ppp)));

        return result;
    }

    std::complex<double> alpha_1_2_integ_part_4(double a, double b, double c, double d, double e, double f, double t_p,
            double t_pp, double t_ppp, int k, experiment::ion_trap& IonTrap)
    {

        const std::complex<double> j(0, 1);

        std::complex<double> result =
                ((16.0*exp(j*c*IonTrap.nu_list[k])*cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                        *(-sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                        -(2.0*cos(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                *(-(exp(j*a*IonTrap.nu_list[k])
                                        *(j*IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                        +exp(j*b*IonTrap.nu_list[k])*(j*IonTrap.nu_list[k]
                                                *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))))
                                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                -pow(IonTrap.nu_list[k], 2)))+(j*(exp(j*a*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))-exp(j*b*IonTrap.nu_list[k])
                        *((IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(IonTrap.nu_list[k]*cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                        /pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                        -(8.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*(exp(j*a*IonTrap.nu_list[k])
                                *((IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))+(IonTrap.nu_list[k]
                                        *cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))-exp(j*b*IonTrap.nu_list[k])
                                *((IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))+(IonTrap.nu_list[k]
                                        *cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -3.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))))
                                /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                        -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *pow(IonTrap.nu_list[k], 2))+(4.0*j*IonTrap.nu_list[k]
                        *(-(exp(j*a*IonTrap.nu_list[k])*(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2))
                                +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*IonTrap.nu_list[k]
                                                *sin(3.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))))+exp(j*b*IonTrap.nu_list[k])
                                *(((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -j*IonTrap.nu_list[k]*sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                        /(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2))
                                        +(3.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *cos(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                -j*IonTrap.nu_list[k]
                                                        *sin(3.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                                /(-9.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                        +pow(IonTrap.nu_list[k], 2)))))
                        /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                -2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                        -(4.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                *sin(2.0*c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))
                        +(8.0*j*exp(j*c*IonTrap.nu_list[k])*IonTrap.nu_list[k]
                                *cos(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                *(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *(-pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                +pow(IonTrap.nu_list[k], 2)))+(4.0*(exp(j*a*IonTrap.nu_list[k])
                        *(-2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                +j*IonTrap.nu_list[k]*sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        +exp(j*b*IonTrap.nu_list[k])*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4))+(8.0
                        *(exp(j*a*IonTrap.nu_list[k])*(2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -j*IonTrap.nu_list[k]*sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                +exp(j*b*IonTrap.nu_list[k])*(-2.0*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                        *cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        +j*IonTrap.nu_list[k]
                                                *sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /(8.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                -2.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *pow(IonTrap.nu_list[k], 2))+(4.0*(-(exp(j*a*IonTrap.nu_list[k])
                        *(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)+pow(IonTrap.nu_list[k], 2)
                                +pow(IonTrap.nu_list[k], 2)*cos(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -2.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                        *sin(2.0*a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        +exp(j*b*IonTrap.nu_list[k])*(-4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                +pow(IonTrap.nu_list[k], 2)
                                +pow(IonTrap.nu_list[k], 2)*cos(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -2.0*j*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*IonTrap.nu_list[k]
                                        *sin(2.0*b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                        *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                        /((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                *(4.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 4)
                                        -5.0*pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                *pow(IonTrap.nu_list[k], 2)+pow(IonTrap.nu_list[k], 4)))
                        -(8.0*exp(j*c*IonTrap.nu_list[k])*(sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                -sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 3)
                                        -(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))*pow(IonTrap.nu_list[k], 2))
                        -(8.0*(-(exp(j*a*IonTrap.nu_list[k])
                                *(j*IonTrap.nu_list[k]*cos(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                        +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                *sin(a*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                +exp(j*b*IonTrap.nu_list[k])
                                        *(j*IonTrap.nu_list[k]*cos(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                                +(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))
                                                        *sin(b*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))))
                                *sin(c*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)))
                                *sin(e*(IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p))))
                                /(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                        *(pow((IonTrap.delta[0][0]+IonTrap.get_stark_shift(0, t_p)), 2)
                                                -pow(IonTrap.nu_list[k], 2))))/8.0;

        return result;
    }
    
}